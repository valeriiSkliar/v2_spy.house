<?php

/**
 * Pay2.House Debug Decoder - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
 */

// –í–∞—à–∏ –∫–ª—é—á–∏ –∏–∑ .env
$api_key = 'YOUR_API_KEY_HERE';
$merchant_id = 'SN2633804563';
$key_id = 'KN2508182990';

// –°–∏–≥–Ω–∞—Ç—É—Ä–∞ –∏–∑ webhook
$signature = 'NTM5OWVlODBiZDVhZWFiNzBmZjE4YmU3MGZjMGRlNGV8ZGYwYmY0MTI2ZTgxNzYwNjA1MjM0OTI5ODRmNzQ5NjE1YTMyOTQzNjNmMDQ3NDZmZmM2NDJlYWFmOTk0NzI4OXxZMm94YTJVd1ExWXpXbTUxT1hkUVRFVm1ORU5NTDFBMllqZFJNelp4VFhOcmJtcHliR0pDZVRRelZsTk1abFp2UW0wMVJsaDRRMFpQWm5GWmNXWlFUM0l5Y1dGRVUwbGtMM2R2TVdreVdqZElURkZQVkhNMGQwY3JVVGMyU210alVYa3ZjMGRqYTJObFpuTmFhRGRrYVZodmNITklla05aVjBwNE1IUjBVa04zU1dFdmVrWkhLMFpOVEZSTVVUTlFTRWd2WlU1WE5tMVpPVTlUZEVkVmEyWldSbXRWWWs5ek9XTnpNa2RYWkRJMWNERlVVRVJYYUZSclpHVlBNbTlRY0VadFFXVXdkR0kwZDJJMVdFcEhURlI1Um1oQ05EQmpVMFp0Ukc5eFFXWjNOSGhhWm0wNUx6WTJhUzlFV1UxRmN6ZEVLMHRwWlZwWmJubFFVM2RsU0RGc1F6Um9ia3RGY1RkRkwyMDNiekZzVUdGYVdqTmtNRUphVUZCeGNDOVVVRGxOYVZZemNETkJTa1Y0TW5OT05XVlRjME5FU1ZoMlRqbG5OMFE0TDNNPQ==';

// –û–∂–∏–¥–∞–µ–º–∞—è –ø–æ–¥–ø–∏—Å—å
$expected_signature = 'df0bf4126e8176060523492984f749615a3294363f04746ffc642eaaf9947289';

echo "=== Pay2.House WEBHOOK DEBUG (–ø–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏) ===\n\n";

// –¢–û–ß–ù–´–ô –∞–ª–≥–æ—Ä–∏—Ç–º –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Pay2.House
function decrypt_webhook_official($data, $secret_key)
{
    echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞: {$secret_key}\n";

    $decoded_data = base64_decode($data);
    if ($decoded_data === FALSE) {
        echo "‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64\n";
        return FALSE;
    }

    $parts = explode('|', $decoded_data);
    if (count($parts) !== 3) {
        echo "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö\n";
        return FALSE;
    }

    list($iv, $signature, $encrypted_data) = $parts;

    // –ò–ú–ï–ù–ù–û –¢–ê–ö–û–ô –∞–ª–≥–æ—Ä–∏—Ç–º –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    $calculated_signature = hash_hmac('sha256', $iv . '|' . $encrypted_data, $secret_key);

    echo "  –ü–æ–ª—É—á–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å:   {$signature}\n";
    echo "  –í—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å:  {$calculated_signature}\n";

    if (hash_equals($calculated_signature, $signature)) {
        echo "  ‚úÖ –ü–û–î–ü–ò–°–¨ –°–û–í–ü–ê–î–ê–ï–¢!\n";

        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        $decoded_encrypted_data = openssl_decrypt(
            base64_decode($encrypted_data),
            'AES-256-CBC',
            hex2bin(hash('sha256', $secret_key)),
            0,
            hex2bin(bin2hex(hex2bin($iv)))
        );

        if ($decoded_encrypted_data !== FALSE) {
            echo "  ‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã: {$decoded_encrypted_data}\n";
            return $decoded_encrypted_data;
        } else {
            echo "  ‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: " . openssl_error_string() . "\n";
        }
    } else {
        echo "  ‚ùå –ü–æ–¥–ø–∏—Å–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç\n";
    }

    echo "\n";
    return FALSE;
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
$test_keys = [
    'API –∫–ª—é—á' => $api_key,
    'Merchant ID' => $merchant_id,
    'Key ID' => $key_id,
    'API + Merchant' => $api_key . $merchant_id,
    'Merchant + API' => $merchant_id . $api_key,
    'Key ID + API' => $key_id . $api_key,
    'API + Key ID' => $api_key . $key_id,
];

echo "1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π:\n";
echo "================================\n";

$success = false;
foreach ($test_keys as $key_name => $test_key) {
    echo "–¢–µ—Å—Ç–∏—Ä—É—é: {$key_name}\n";
    $result = decrypt_webhook_official($signature, $test_key);
    if ($result !== FALSE) {
        $success = true;
        echo "üéâ –ù–ê–ô–î–ï–ù –ü–†–ê–í–ò–õ–¨–ù–´–ô –ö–õ–Æ–ß: {$key_name}\n";
        echo "üîë –ö–ª—é—á: {$test_key}\n";
        echo "üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {$result}\n";
        break;
    }
}

if (!$success) {
    echo "\n2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n";
    echo "==============================\n";

    // –í–æ–∑–º–æ–∂–Ω–æ –∫–ª—é—á –Ω—É–∂–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å
    $additional_keys = [
        'API lowercase' => strtolower($api_key),
        'API uppercase' => strtoupper($api_key),
        '–ü–µ—Ä–≤—ã–µ 32 —Å–∏–º–≤–æ–ª–∞ API' => substr($api_key, 0, 32),
        '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 32 —Å–∏–º–≤–æ–ª–∞ API' => substr($api_key, -32),
        'MD5 –æ—Ç API' => md5($api_key),
        'SHA256 –æ—Ç API' => hash('sha256', $api_key),
    ];

    foreach ($additional_keys as $key_name => $test_key) {
        echo "–¢–µ—Å—Ç–∏—Ä—É—é: {$key_name}\n";
        $result = decrypt_webhook_official($signature, $test_key);
        if ($result !== FALSE) {
            $success = true;
            echo "üéâ –ù–ê–ô–î–ï–ù –ü–†–ê–í–ò–õ–¨–ù–´–ô –ö–õ–Æ–ß: {$key_name}\n";
            echo "üîë –ö–ª—é—á: {$test_key}\n";
            echo "üìÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {$result}\n";
            break;
        }
    }
}

if (!$success) {
    echo "\n‚ùå –ù–ò –û–î–ò–ù –ö–õ–Æ–ß –ù–ï –ü–û–î–û–®–ï–õ\n";
    echo "\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n";
    echo "1. –ù—É–∂–µ–Ω webhook secret key (–æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç API key)\n";
    echo "2. –ö–ª—é—á –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Pay2.House\n";
    echo "3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É Pay2.House\n";
    echo "\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Pay2.House:\n";
    echo "- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ webhook'–æ–≤\n";
    echo "- Webhook secret key\n";
    echo "- Merchant settings\n";
}

echo "\n=== –ò–¢–û–ì–û–í–´–ô –ö–û–î –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø ===\n";
