<?php

namespace Database\Seeders;

use App\Helpers\IsoCodesHelper;
use App\Models\Frontend\IsoEntity;
use App\Models\Frontend\IsoTranslation;
use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class CountryAndLanguageSeeder extends Seeder
{
    public function run(): void
    {
        $this->command->info('üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω –∏ —è–∑—ã–∫–æ–≤...');

        // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü
        $this->clearTables();

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ª–æ–∫–∞–ª–µ–π
        $localesData = [
            'en' => IsoCodesHelper::getCountryAndLanguageDataByLocale('en_US.UTF-8'),
            'ru' => IsoCodesHelper::getCountryAndLanguageDataByLocale('ru_RU.UTF-8'),
        ];

        $this->command->info('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏—è—Ö:');
        $excludedCodes = IsoCodesHelper::getExcludedCodes();
        if (!empty($excludedCodes)) {
            $this->command->info('–ò—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ –∫–æ–¥—ã: ' . implode(', ', $excludedCodes));
        } else {
            $this->command->info('–ù–µ—Ç –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤');
        }

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω
        $this->command->info('üåç –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω...');
        $this->seedCountries($localesData);

        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤
        $this->command->info('üó£Ô∏è –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤...');
        $this->seedLanguages($localesData);

        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        $this->command->info('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fallback –ø–µ—Ä–µ–≤–æ–¥–æ–≤...');
        $this->testFallbackTranslations();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        $this->command->info('üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π...');
        $this->testExclusions();

        $this->command->info('‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    }

    private function clearTables(): void
    {
        $this->command->info('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü...');
        DB::statement('SET FOREIGN_KEY_CHECKS=0;');
        IsoTranslation::query()->delete();
        IsoEntity::query()->delete();
        DB::statement('SET FOREIGN_KEY_CHECKS=1;');
    }

    private function seedCountries(array $localesData): void
    {
        $countries = $localesData['en']['countries'];
        $stats = [
            'total' => 0,
            'created' => 0,
            'excluded' => 0,
        ];

        foreach ($countries as $countryData) {
            $stats['total']++;
            $iso2 = $countryData['iso2'];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏–º–µ–Ω–∏–º—ã –∫ —Å—Ç—Ä–∞–Ω–∞–º)
            if (IsoCodesHelper::isExcluded($iso2)) {
                $stats['excluded']++;
                $this->command->info("–ò—Å–∫–ª—é—á–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∞: {$iso2} ({$countryData['name']})");
                continue;
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ ISO —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
            $entity = IsoEntity::create([
                'type' => 'country',
                'iso_code_2' => $iso2,
                'iso_code_3' => $countryData['iso3'],
                'numeric_code' => $countryData['numeric_code'],
                'name' => $countryData['name'],
                'is_active' => true,
            ]);

            $stats['created']++;

            // –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞–ª–∏
            foreach ($localesData as $langCode => $localeData) {
                $translatedName = $this->findCountryTranslation(
                    $iso2,
                    $localeData['countries']
                );

                if ($translatedName) {
                    $entity->translations()->create([
                        'language_code' => $langCode,
                        'translated_name' => $translatedName,
                    ]);
                }
            }
        }

        // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å—Ç—Ä–∞–Ω
        $this->command->info("=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω ===");
        $this->command->info("–í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω: {$stats['total']}");
        $this->command->info("–°–æ–∑–¥–∞–Ω–æ —Å—É—â–Ω–æ—Å—Ç–µ–π: {$stats['created']}");
        $this->command->info("–ò—Å–∫–ª—é—á–µ–Ω–æ: {$stats['excluded']}");
    }

    private function seedLanguages(array $localesData): void
    {
        $languages = $localesData['en']['languages'];
        $stats = [
            'total' => 0,
            'created' => 0,
            'excluded' => 0,
            'fallback_used' => 0,
            'no_translation' => 0,
        ];

        foreach ($languages as $languageData) {
            $stats['total']++;
            $iso2 = $languageData['iso2'];

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            if (IsoCodesHelper::isExcluded($iso2)) {
                $stats['excluded']++;
                $this->command->info("–ò—Å–∫–ª—é—á—ë–Ω —è–∑—ã–∫: {$iso2} ({$languageData['name']})");
                continue;
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ ISO —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —è–∑—ã–∫–∞
            $entity = IsoEntity::create([
                'type' => 'language',
                'iso_code_2' => $iso2,
                'iso_code_3' => $languageData['iso3'],
                'numeric_code' => null, // –£ —è–∑—ã–∫–æ–≤ –Ω–µ—Ç numeric –∫–æ–¥–æ–≤
                'name' => $languageData['name'],
                'is_active' => true,
            ]);

            $stats['created']++;

            // –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –ª–æ–∫–∞–ª–∏
            foreach ($localesData as $langCode => $localeData) {
                $translatedName = $this->findLanguageTranslation(
                    $iso2,
                    $localeData['languages'],
                    $langCode
                );

                if ($translatedName) {
                    $entity->translations()->create([
                        'language_code' => $langCode,
                        'translated_name' => $translatedName,
                    ]);

                    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fallback –ø–µ—Ä–µ–≤–æ–¥–æ–≤
                    if ($langCode === 'ru' && IsoCodesHelper::hasTranslation($iso2)) {
                        $isFromLibrary = $this->findLanguageInArray($iso2, $localeData['languages']);
                        if (!$isFromLibrary) {
                            $stats['fallback_used']++;
                            $this->command->info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è {$iso2}: {$translatedName}");
                        }
                    }
                } else {
                    $stats['no_translation']++;
                    $this->command->warn("–ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è {$iso2} –Ω–∞ —è–∑—ã–∫–µ {$langCode}");
                }
            }
        }

        // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        $this->command->info("=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ ===");
        $this->command->info("–í—Å–µ–≥–æ —è–∑—ã–∫–æ–≤: {$stats['total']}");
        $this->command->info("–°–æ–∑–¥–∞–Ω–æ —Å—É—â–Ω–æ—Å—Ç–µ–π: {$stats['created']}");
        $this->command->info("–ò—Å–∫–ª—é—á–µ–Ω–æ: {$stats['excluded']}");
        $this->command->info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ fallback –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {$stats['fallback_used']}");
        $this->command->info("–ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {$stats['no_translation']}");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —è–∑—ã–∫ –≤ –º–∞—Å—Å–∏–≤–µ (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
     */
    private function findLanguageInArray(string $iso2, array $languages): bool
    {
        foreach ($languages as $language) {
            if ($language['iso2'] === $iso2) {
                return true;
            }
        }
        return false;
    }

    private function findCountryTranslation(string $iso2, array $countries): ?string
    {
        foreach ($countries as $country) {
            if ($country['iso2'] === $iso2) {
                return $country['name'];
            }
        }
        return null;
    }

    private function findLanguageTranslation(string $iso2, array $languages, string $langCode): ?string
    {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–∫–ª—é—á—ë–Ω –ª–∏ –¥–∞–Ω–Ω—ã–π –∫–æ–¥
        if (IsoCodesHelper::isExcluded($iso2)) {
            return null; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ —è–∑—ã–∫–∏
        }

        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –æ–±—ã—á–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–∞—Ö
        foreach ($languages as $language) {
            if ($language['iso2'] === $iso2) {
                return $language['name'];
            }
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏ —ç—Ç–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        if ($langCode === 'ru' && IsoCodesHelper::hasTranslation($iso2)) {
            return IsoCodesHelper::getRussianLanguageTranslation($iso2);
        }

        return null;
    }

    private function testFallbackTranslations(): void
    {
        $testResults = [
            'tested' => 0,
            'passed' => 0,
            'failed' => 0,
            'excluded' => 0,
        ];

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —è–∑—ã–∫–æ–≤—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ –ë–î
        $languages = IsoEntity::languages()->get();

        foreach ($languages as $language) {
            $iso2 = $language->iso_code_2;
            $testResults['tested']++;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            if (IsoCodesHelper::isExcluded($iso2)) {
                $testResults['excluded']++;
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ –≤ –ë–î
            $dbTranslation = $language->translations()
                ->where('language_code', 'ru')
                ->first();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ fallback –ø–µ—Ä–µ–≤–æ–¥
            $fallbackTranslation = IsoCodesHelper::getRussianLanguageTranslation($iso2);

            if ($dbTranslation) {
                // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –µ—Å—Ç—å –≤ –ë–î
                if (!empty($fallbackTranslation) && $dbTranslation->translated_name !== $fallbackTranslation) {
                    $this->command->warn("‚ö†Ô∏è –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–ª—è {$iso2}: –ë–î='{$dbTranslation->translated_name}', Fallback='{$fallbackTranslation}'");
                }
                $testResults['passed']++;
            } else {
                // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ—Ç –≤ –ë–î, –Ω–æ –µ—Å—Ç—å fallback
                if (!empty($fallbackTranslation)) {
                    $this->command->error("‚ùå –ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –ë–î –¥–ª—è {$iso2}, –Ω–æ –µ—Å—Ç—å fallback: '{$fallbackTranslation}'");
                    $testResults['failed']++;
                } else {
                    // –ù–∏ –ë–î, –Ω–∏ fallback - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —è–∑—ã–∫–æ–≤
                    $testResults['passed']++;
                }
            }
        }

        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        $this->command->info("=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è fallback –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ===");
        $this->command->info("–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —è–∑—ã–∫–æ–≤: {$testResults['tested']}");
        $this->command->info("–ü—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É: {$testResults['passed']}");
        $this->command->info("–ù–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É: {$testResults['failed']}");
        $this->command->info("–ò—Å–∫–ª—é—á–µ–Ω–æ –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏: {$testResults['excluded']}");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ fallback –ø–µ—Ä–µ–≤–æ–¥—ã
        $this->testSpecificFallbacks();
    }

    private function testSpecificFallbacks(): void
    {
        $this->command->info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö fallback –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ===");

        $specificTests = [
            'DV' => '–º–∞–ª—å–¥–∏–≤—Å–∫–∏–π',
            'KL' => '–≥—Ä–µ–Ω–ª–∞–Ω–¥—Å–∫–∏–π',
            'EL' => '–≥—Ä–µ—á–µ—Å–∫–∏–π',
            'NE' => '–Ω–µ–ø–∞–ª—å—Å–∫–∏–π',
            'OS' => '–æ—Å–µ—Ç–∏–Ω—Å–∫–∏–π',
            'PA' => '–ø–∞–Ω–¥–∂–∞–±–∏',
            'RM' => '—Ä–æ–º–∞–Ω—à—Å–∫–∏–π',
            'SI' => '—Å–∏–Ω–≥–∞–ª—å—Å–∫–∏–π',
        ];

        foreach ($specificTests as $iso2 => $expectedTranslation) {
            if (IsoCodesHelper::isExcluded($iso2)) {
                $this->command->info("üö´ {$iso2} –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
                continue;
            }

            $actualTranslation = IsoCodesHelper::getRussianLanguageTranslation($iso2);

            if ($actualTranslation === $expectedTranslation) {
                $this->command->info("‚úÖ {$iso2}: '{$actualTranslation}' - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            } else {
                $this->command->error("‚ùå {$iso2}: –æ–∂–∏–¥–∞–ª—Å—è '{$expectedTranslation}', –ø–æ–ª—É—á–µ–Ω '{$actualTranslation}'");
            }
        }
    }

    private function testExclusions(): void
    {
        $this->command->info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏—Å–∫–ª—é—á–µ–Ω–∏–π ===");

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —è–∑—ã–∫–æ–≤—ã–µ –∫–æ–¥—ã (–∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫ —è–∑—ã–∫–∞–º)
        $languageTestCases = [
            'CU' => '—Ü–µ—Ä–∫–æ–≤–Ω–æ—Å–ª–∞–≤—è–Ω—Å–∫–∏–π', // –≠—Ç–æ—Ç –∫–æ–¥ –∏—Å–∫–ª—é—á—ë–Ω
            'SH' => '—Å–µ—Ä–±—Å–∫–æ—Ö–æ—Ä–≤–∞—Ç—Å–∫–∏–π',  // –≠—Ç–æ—Ç –∫–æ–¥ —Ç–∞–∫–∂–µ –∏—Å–∫–ª—é—á—ë–Ω
            'RU' => '—Ä—É—Å—Å–∫–∏–π',            // –ù–µ –∏—Å–∫–ª—é—á—ë–Ω
            'EN' => '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π',         // –ù–µ –∏—Å–∫–ª—é—á—ë–Ω
        ];

        foreach ($languageTestCases as $iso2 => $expectedTranslation) {
            $isExcluded = IsoCodesHelper::isExcluded($iso2);
            $hasTranslation = IsoCodesHelper::hasTranslation($iso2);
            $actualTranslation = IsoCodesHelper::getRussianLanguageTranslation($iso2);

            if ($isExcluded) {
                $this->command->info("üö´ {$iso2} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏");

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–π –∫–æ–¥ –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î
                $entityExists = IsoEntity::languages()->byIso2($iso2)->exists();
                if (!$entityExists) {
                    $this->command->info("‚úÖ {$iso2} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î");
                } else {
                    $this->command->error("‚ùå {$iso2} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î, —Ö–æ—Ç—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–∫–ª—é—á—ë–Ω");
                }
            } else {
                if ($hasTranslation && $actualTranslation === $expectedTranslation) {
                    $this->command->info("‚úÖ {$iso2}: '{$actualTranslation}' - –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
                } else {
                    $this->command->warn("‚ö†Ô∏è {$iso2}: –æ–∂–∏–¥–∞–ª—Å—è '{$expectedTranslation}', –ø–æ–ª—É—á–µ–Ω '{$actualTranslation}'");
                }
            }
        }

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        $this->testDynamicExclusions();
    }

    private function testDynamicExclusions(): void
    {
        $this->command->info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π ===");

        $testCode = 'XX'; // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        // –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        IsoCodesHelper::addToExcluded($testCode);
        if (IsoCodesHelper::isExcluded($testCode)) {
            $this->command->info("‚úÖ –ö–æ–¥ {$testCode} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è");
        } else {
            $this->command->error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å {$testCode} –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è");
        }

        // –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        IsoCodesHelper::removeFromExcluded($testCode);
        if (!IsoCodesHelper::isExcluded($testCode)) {
            $this->command->info("‚úÖ –ö–æ–¥ {$testCode} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π");
        } else {
            $this->command->error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {$testCode} –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏–π");
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        $excludedCodes = IsoCodesHelper::getExcludedCodes();
        $this->command->info("üìã –¢–µ–∫—É—â–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: " . implode(', ', $excludedCodes));
    }
}
