<?php

declare(strict_types=1);

namespace App\Services;

use App\Models\User;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Str;
use PragmaRX\Google2FALaravel\Facade as Google2FAFacade;

class SecurityService
{
    public function __construct(
        private readonly EmailService $emailService
    ) {}

    /**
     * Generate verification code
     */
    public function generateVerificationCode(): string
    {
        return str_pad((string) random_int(100000, 999999), 6, '0', STR_PAD_LEFT);
    }

    /**
     * Get preferred confirmation method for user
     */
    public function getConfirmationMethod(User $user): string
    {
        return $user->google_2fa_enabled ? 'authenticator' : 'email';
    }

    /**
     * Send verification code to user
     */
    public function sendVerificationCode(User $user, string $method, string $code): bool
    {
        try {
            if ($method === 'email') {
                $this->emailService->sendVerificationCode($user, $code);

                return true;
            }

            // For authenticator, code is generated by the app
            return true;
        } catch (\Exception $e) {
            Log::error('Error sending verification code', [
                'user_id' => $user->id,
                'method' => $method,
                'error' => $e->getMessage(),
            ]);

            return false;
        }
    }

    /**
     * Verify code based on method
     */
    public function verifyCode(User $user, string $code, string $method): bool
    {
        if ($method === 'authenticator') {
            return $this->verifyAuthenticatorCode($user, $code);
        }

        return $this->verifyEmailCode($user, $code);
    }

    /**
     * Verify Google Authenticator code
     */
    public function verifyAuthenticatorCode(User $user, string $code): bool
    {
        try {
            return Google2FAFacade::verifyKey($user->google_2fa_secret, $code);
        } catch (\Exception $e) {
            Log::error('Error verifying authenticator code', [
                'user_id' => $user->id,
                'error' => $e->getMessage(),
            ]);

            return false;
        }
    }

    /**
     * Verify email verification code
     */
    public function verifyEmailCode(User $user, string $providedCode): bool
    {
        // This would typically check against a cached code
        // Implementation depends on how email codes are stored
        $cacheKeys = [
            'password_update_code:'.$user->id,
            'email_update_code:'.$user->id,
            'personal_greeting_update_code:'.$user->id,
        ];

        foreach ($cacheKeys as $key) {
            $cachedData = Cache::get($key);
            if ($cachedData) {
                try {
                    $data = \Illuminate\Support\Facades\Crypt::decrypt($cachedData);
                    if (isset($data['code']) && $data['code'] === $providedCode) {
                        return true;
                    }
                } catch (\Exception $e) {
                    Log::error('Error decrypting cached code', [
                        'user_id' => $user->id,
                        'cache_key' => $key,
                        'error' => $e->getMessage(),
                    ]);
                }
            }
        }

        return false;
    }

    /**
     * Enable 2FA for user
     */
    public function enable2FA(User $user): array
    {
        try {
            $secret = Google2FAFacade::generateSecretKey();
            $qrCodeUrl = Google2FAFacade::getQRCodeInline(
                config('app.name'),
                $user->email,
                $secret
            );

            // Store secret temporarily
            Cache::put('2fa_setup:'.$user->id, $secret, now()->addMinutes(10));

            return [
                'secret' => $secret,
                'qr_code' => $qrCodeUrl,
                'success' => true,
            ];
        } catch (\Exception $e) {
            Log::error('Error enabling 2FA', [
                'user_id' => $user->id,
                'error' => $e->getMessage(),
            ]);

            return ['success' => false, 'error' => $e->getMessage()];
        }
    }

    /**
     * Confirm 2FA setup
     */
    public function confirm2FASetup(User $user, string $code): bool
    {
        $secret = Cache::get('2fa_setup:'.$user->id);

        if (! $secret) {
            return false;
        }

        try {
            if (Google2FAFacade::verifyKey($secret, $code)) {
                $user->google_2fa_secret = $secret;
                $user->google_2fa_enabled = true;
                $user->save();

                Cache::forget('2fa_setup:'.$user->id);

                Log::info('2FA enabled successfully', ['user_id' => $user->id]);

                return true;
            }

            return false;
        } catch (\Exception $e) {
            Log::error('Error confirming 2FA setup', [
                'user_id' => $user->id,
                'error' => $e->getMessage(),
            ]);

            return false;
        }
    }

    /**
     * Disable 2FA for user
     */
    public function disable2FA(User $user, string $code): bool
    {
        try {
            if (! $this->verifyAuthenticatorCode($user, $code)) {
                return false;
            }

            $user->google_2fa_secret = null;
            $user->google_2fa_enabled = false;
            $user->save();

            Log::info('2FA disabled successfully', ['user_id' => $user->id]);

            return true;
        } catch (\Exception $e) {
            Log::error('Error disabling 2FA', [
                'user_id' => $user->id,
                'error' => $e->getMessage(),
            ]);

            return false;
        }
    }

    /**
     * Update IP restrictions for user
     */
    public function updateIpRestrictions(User $user, array $ips): bool
    {
        try {
            // Validate IP addresses
            $validIps = [];
            foreach ($ips as $ip) {
                $ip = trim($ip);
                if (filter_var($ip, FILTER_VALIDATE_IP)) {
                    $validIps[] = $ip;
                }
            }

            $user->allowed_ips = ! empty($validIps) ? implode(',', $validIps) : null;
            $result = $user->save();

            Log::info('IP restrictions updated', [
                'user_id' => $user->id,
                'ips_count' => count($validIps),
            ]);

            return $result;
        } catch (\Exception $e) {
            Log::error('Error updating IP restrictions', [
                'user_id' => $user->id,
                'error' => $e->getMessage(),
                'ips' => $ips,
            ]);

            return false;
        }
    }

    /**
     * Check if IP is allowed for user
     */
    public function isIpAllowed(User $user, string $ip): bool
    {
        if (empty($user->allowed_ips)) {
            return true; // No restrictions
        }

        $allowedIps = explode(',', $user->allowed_ips);

        return in_array($ip, $allowedIps);
    }

    /**
     * Generate recovery codes for user
     */
    public function generateRecoveryCodes(User $user): array
    {
        $codes = [];
        for ($i = 0; $i < 8; $i++) {
            $codes[] = Str::random(10);
        }

        $user->recovery_codes = encrypt(json_encode($codes));
        $user->save();

        Log::info('Recovery codes generated', ['user_id' => $user->id]);

        return $codes;
    }

    /**
     * Verify recovery code
     */
    public function verifyRecoveryCode(User $user, string $code): bool
    {
        if (empty($user->recovery_codes)) {
            return false;
        }

        try {
            $codes = json_decode(decrypt($user->recovery_codes), true);

            if (in_array($code, $codes)) {
                // Remove used code
                $codes = array_filter($codes, fn ($c) => $c !== $code);
                $user->recovery_codes = encrypt(json_encode($codes));
                $user->save();

                Log::info('Recovery code used', ['user_id' => $user->id]);

                return true;
            }

            return false;
        } catch (\Exception $e) {
            Log::error('Error verifying recovery code', [
                'user_id' => $user->id,
                'error' => $e->getMessage(),
            ]);

            return false;
        }
    }

    /**
     * Get user's security level
     */
    public function getSecurityLevel(User $user): string
    {
        $score = 0;

        if ($user->google_2fa_enabled) {
            $score += 40;
        }

        if (! empty($user->allowed_ips)) {
            $score += 20;
        }

        if ($user->last_password_reset_at && $user->last_password_reset_at->gt(now()->subMonths(3))) {
            $score += 20;
        }

        if ($user->email_verified_at) {
            $score += 20;
        }

        return match (true) {
            $score >= 80 => 'high',
            $score >= 50 => 'medium',
            default => 'low'
        };
    }
}
