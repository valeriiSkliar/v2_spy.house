#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö frontend —Ç–µ—Å—Ç–æ–≤
 * –í–∫–ª—é—á–∞–µ—Ç unit, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏ E2E —Ç–µ—Å—Ç—ã
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç—ã –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞
 */

import { execSync, spawn } from 'child_process';
import { existsSync } from 'fs';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
};

function log(message, color = colors.white) {
  console.log(`${color}${message}${colors.reset}`);
}

function logHeader(message) {
  log('\n' + '='.repeat(60), colors.cyan);
  log(`  ${message}`, colors.cyan);
  log('='.repeat(60), colors.cyan);
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, colors.green);
}

function logError(message) {
  log(`‚ùå ${message}`, colors.red);
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, colors.yellow);
}

function logInfo(message) {
  log(`‚ÑπÔ∏è  ${message}`, colors.blue);
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤
const testConfig = {
  unit: {
    name: 'Unit —Ç–µ—Å—Ç—ã',
    pattern: 'tests/frontend/components/baseSelect.test.js',
    timeout: 30000,
  },
  // integration: {
  //   name: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã',
  //   pattern: 'tests/frontend/components/**/*.integration.test.js',
  //   timeout: 60000,
  // },
  // e2e: {
  //   name: 'E2E —Ç–µ—Å—Ç—ã',
  //   pattern: 'tests/frontend/e2e/**/*.test.js',
  //   timeout: 120000,
  // },
  // store: {
  //   name: 'Store —Ç–µ—Å—Ç—ã',
  //   pattern: 'tests/frontend/creatives/**/*.test.js',
  //   timeout: 30000,
  // },
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
function checkDependencies() {
  logHeader('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');

  const requiredFiles = [
    'vitest.config.js',
    'tests/frontend/setup.js',
    'resources/js/alpine/components/baseSelect.js',
    'resources/js/creatives/store/creativesStore.js',
  ];

  let allDependenciesOk = true;

  for (const file of requiredFiles) {
    if (existsSync(file)) {
      logSuccess(`${file} –Ω–∞–π–¥–µ–Ω`);
    } else {
      logError(`${file} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      allDependenciesOk = false;
    }
  }

  return allDependenciesOk;
}

// –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç–µ—Å—Ç–æ–≤
async function runTestSuite(type, config) {
  logHeader(`–ó–∞–ø—É—Å–∫ ${config.name}`);

  return new Promise(resolve => {
    const args = [
      'run',
      '--reporter=verbose',
      '--coverage',
      `--testTimeout=${config.timeout}`,
      config.pattern,
    ];

    logInfo(`–ö–æ–º–∞–Ω–¥–∞: npx vitest ${args.join(' ')}`);

    const process = spawn('npx', ['vitest', ...args], {
      stdio: 'inherit',
      shell: true,
    });

    process.on('close', code => {
      if (code === 0) {
        logSuccess(`${config.name} –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ`);
        resolve({ type, success: true, code });
      } else {
        logError(`${config.name} –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏ (–∫–æ–¥: ${code})`);
        resolve({ type, success: false, code });
      }
    });

    process.on('error', error => {
      logError(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ${config.name}: ${error.message}`);
      resolve({ type, success: false, error: error.message });
    });
  });
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
function generateCoverageReport() {
  logHeader('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏');

  try {
    execSync('npx vitest --coverage --reporter=html', { stdio: 'inherit' });
    logSuccess('–û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –≤ coverage/');
    logInfo('–û—Ç–∫—Ä–æ–π—Ç–µ coverage/index.html –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞');
  } catch (error) {
    logError('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏');
    console.error(error.message);
  }
}

// –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
function analyzeResults(results) {
  logHeader('–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');

  const totalTests = results.length;
  const successfulTests = results.filter(r => r.success).length;
  const failedTests = totalTests - successfulTests;

  log(`\n–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–±–æ—Ä–æ–≤: ${totalTests}`);
  logSuccess(`–£—Å–ø–µ—à–Ω–æ: ${successfulTests}`);

  if (failedTests > 0) {
    logError(`–ù–µ—É—Å–ø–µ—à–Ω–æ: ${failedTests}`);
  }

  // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–∞–±–æ—Ä—É
  results.forEach(result => {
    const status = result.success ? '‚úÖ' : '‚ùå';
    const config = testConfig[result.type];
    log(
      `${status} ${config.name}: ${result.success ? '–ü–†–û–ô–î–ï–ù' : `–ü–†–û–í–ê–õ–ï–ù (–∫–æ–¥: ${result.code})`}`
    );
  });

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (failedTests > 0) {
    logHeader('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏');
    logWarning('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:');
    log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ –≤—ã—à–µ');
    log('2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
    log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–¥–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
    log('4. –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–æ–≥–∏–∫–∞');
  } else {
    logSuccess('–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! üéâ');
    logInfo('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É');
  }

  return failedTests === 0;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const startTime = Date.now();

  log('üß™ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è BaseSelect –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤', colors.magenta);
  log(`–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString()}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  if (!checkDependencies()) {
    logError('–ù–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
    process.exit(1);
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–ø—É—Å–∫–∞—Ç—å
  const testTypes = process.argv.slice(2);
  const shouldRunAll = testTypes.length === 0;
  const typesToRun = shouldRunAll ? Object.keys(testConfig) : testTypes;

  logInfo(`–ë—É–¥—É—Ç –∑–∞–ø—É—â–µ–Ω—ã —Ç–µ—Å—Ç—ã: ${typesToRun.join(', ')}`);

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
  const results = [];

  for (const type of typesToRun) {
    if (!testConfig[type]) {
      logWarning(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–æ–≤: ${type}`);
      continue;
    }

    const result = await runTestSuite(type, testConfig[type]);
    results.push(result);
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏
  if (shouldRunAll && results.every(r => r.success)) {
    generateCoverageReport();
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const allTestsPassed = analyzeResults(results);

  const endTime = Date.now();
  const duration = Math.round((endTime - startTime) / 1000);

  logHeader('–ò—Ç–æ–≥–∏');
  log(`–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration} —Å–µ–∫—É–Ω–¥`);

  if (allTestsPassed) {
    logSuccess('–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    process.exit(0);
  } else {
    logError('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å');
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  logError('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Promise:');
  console.error(reason);
  process.exit(1);
});

process.on('uncaughtException', error => {
  logError('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:');
  console.error(error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫
main().catch(error => {
  logError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:');
  console.error(error);
  process.exit(1);
});
